import sys
import matplotlib
matplotlib.use('Agg')
from matplotlib import pyplot as plt
import numpy as np
import toolshed as ts
import seaborn as sns
sns.set_style('whitegrid')

def read_values(path='/uufs/chpc.utah.edu/common/home/u1021864/analysis/scoredregions.bed'):
    gerp,phast,cadd,topgerp,topphast,topcadd,ccrpct,topccr=[],[],[],[],[],[],[],[]
    for i, region in enumerate(ts.reader(path, header="ordered")):
        g = np.mean(map(float,region['GERP'].split(",")))
        p = np.mean(map(float,region['phastCons'].split(",")))
        c = np.mean(map(float,region['CADD'].split(",")))
        pct=float(region['weighted_pct'])
        gerp.append(g);phast.append(p);cadd.append(c);ccrpct.append(pct)
        if pct>=99:
            topgerp.append(g);topphast.append(p);topcadd.append(c);topccr.append(pct)
    return gerp,phast,cadd,topgerp,topphast,topcadd,ccrpct,topccr

fig, axarr = plt.subplots(3,2)
fig.tight_layout()
gerp,phast,cadd,topgerp,topphast,topcadd,ccrpct,topccr=read_values('scoredregions.bed')
#TODO ADD top 1% and shrink point size for right size plots!!
mi,ma=min(gerp),max(gerp)
rng = (mi,ma)
m,m_edges=np.histogram(gerp, bins=40, range=rng)
m=map(lambda x: float(x)/sum(m), m)
width_m = (m_edges[1]-m_edges[0])
axarr[0,0].bar(m_edges[:-1], m, width = width_m, color = 'r', label = 'all', alpha = 0.5)
mi,ma=min(topgerp),max(topgerp)
rng = (mi,ma)
t,t_edges=np.histogram(topgerp, bins=40, range=rng)
t=map(lambda x: float(x)/sum(t), t)
width_t = (t_edges[1]-t_edges[0])
axarr[0,0].bar(t_edges[:-1], t, width = width_t, color = 'b', label = 'top 1%', alpha = 0.5)
axarr[0,0].set_xlabel('GERP');axarr[0,0].set_ylabel('Frequency')
axarr[0,0].legend(loc='best')
axarr[0,0].axvline(np.nanmean(gerp), color='r', linestyle='dashed', linewidth=2)
axarr[0,0].axvline(np.nanmean(topgerp), color='b', linestyle='dashed', linewidth=2)
mi,ma=min(phast),max(phast)
rng = (mi,ma)
m,m_edges=np.histogram(phast, bins=40, range=rng)
m=map(lambda x: float(x)/sum(m), m)
width_m = (m_edges[1]-m_edges[0])
axarr[1,0].bar(m_edges[:-1], m, width = width_m, color = 'r', label = 'all', alpha = 0.5)
mi,ma=min(topphast),max(topphast)
rng = (mi,ma)
t,t_edges=np.histogram(topphast, bins=40, range=rng)
t=map(lambda x: float(x)/sum(t), t)
width_t = (t_edges[1]-t_edges[0])
axarr[1,0].bar(t_edges[:-1], t, width = width_t, color = 'b', label = 'top 1%', alpha = 0.5)
axarr[1,0].set_xlabel('phastCons');axarr[1,0].set_ylabel('Frequency')
axarr[1,0].legend(loc='best')
axarr[1,0].axvline(np.nanmean(phast), color='r', linestyle='dashed', linewidth=2)
axarr[1,0].axvline(np.nanmean(topphast), color='b', linestyle='dashed', linewidth=2)
mi,ma=min(cadd),max(cadd)
rng = (mi,ma)
m,m_edges=np.histogram(cadd, bins=40, range=rng)
m=map(lambda x: float(x)/sum(m), m)
width_m = (m_edges[1]-m_edges[0])
axarr[2,0].bar(m_edges[:-1], m, width = width_m, color = 'r', label = 'all', alpha = 0.5)
mi,ma=min(topcadd),max(topcadd)
rng = (mi,ma)
t,t_edges=np.histogram(topcadd, bins=40, range=rng)
t=map(lambda x: float(x)/sum(t), t)
width_t = (t_edges[1]-t_edges[0])
axarr[2,0].bar(t_edges[:-1], t, width = width_t, color = 'b', label = 'top 1%', alpha = 0.5)
axarr[2,0].set_xlabel('CADD');axarr[2,0].set_ylabel('Frequency')
axarr[2,0].legend(loc='best')
axarr[2,0].axvline(np.nanmean(cadd), color='r', linestyle='dashed', linewidth=2)
axarr[2,0].axvline(np.nanmean(topcadd), color='b', linestyle='dashed', linewidth=2)
print np.nanmean(gerp), np.nanmean(phast), np.nanmean(cadd)
axarr[0,1].plot(topccr, topgerp, 'b.', label='ccr_vs_gerp', alpha=0.2, ms=3)
axarr[0,1].set_xlabel('CCR Percentile');axarr[0,1].set_ylabel('Score')
axarr[0,1].legend(loc='best')
axarr[1,1].plot(topccr, topphast, 'r.', label='ccr_vs_phastcons', alpha=0.2, ms=3)
axarr[1,1].set_xlabel('CCR Percentile');axarr[1,1].set_ylabel('Score')
axarr[1,1].legend(loc='best')
axarr[2,1].plot(topccr, topcadd, 'g.', label='ccr_vs_cadd', alpha=0.2, ms=3)
axarr[2,1].set_xlabel('CCR Percentile');axarr[2,1].set_ylabel('Score')
axarr[2,1].legend(loc='best')
plt.savefig('conservation.png',bbox_inches='tight')
